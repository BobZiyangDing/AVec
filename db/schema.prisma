// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

model User {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  name           String?  @default("")
  email          String   @unique
  hashedPassword String?
  phone          String?  @default("")
  role           String   @default("USER")
  version        String   @default("ENTERPRISE")

  tokens    Token[]
  sessions  Session[]
  orders    Order[]
  addresses Address[]
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model Token {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  hashedToken String
  type        String
  // See note below about TokenType enum
  // type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([hashedToken, type])
}

// NOTE: It's highly recommended to use an enum for the token type
//       but enums only work in Postgres.
//       See: https://blitzjs.com/docs/database-overview#switch-to-postgresql
// enum TokenType {
//   RESET_PASSWORD
// }

model Order {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  number    String

  // Order Input Specification
  goi         String
  throughput  Int
  ecoliType   String
  condition   String
  description String // 备注


  status    String  @default("order received") // finished? delivered? pending?
  price     Int // price
  payment   String  @default("credit card") // wechat? credit card?
  seqType   String  @default("dna")
  needSynth Boolean


  // Order Elements
  hasDataplot Boolean
  hasDataset  Boolean
  hasModel    Boolean

  // Element Results
  topSequence String?
  dataplotDir String?
  datasetDir  String?
  modelDir    String?

  owner  User @relation(fields: [userId], references: [id])
  userId Int

  address   Address @relation(fields: [addressId], references: [id])
  addressId Int
}

model Address {
  id            Int    @id @default(autoincrement())
  name          String
  streetAddress String // district street building room #
  city          String
  province      String
  zip           String


  owner  User    @relation(fields: [userId], references: [id])
  userId Int
  orders Order[]
}
